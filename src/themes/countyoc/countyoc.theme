<?php

/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\CurrentRouteMatch;
use Drupal\Core\Url;
use Drupal\file\Entity\File;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function countyoc_theme_suggestions_container_alter(&$suggestions, $vars) {
  $name = '';
  $type = '';
  if (isset($vars['element']['#name'])) {
    $name = $vars['element']['#name'];
  }

  if (isset($vars['element']['#type'])) {
    $type = $vars['element']['#type'];
  }

  array_unshift($suggestions, 'container__' . $type . '__' . $name);
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function countyoc_theme_suggestions_block_alter(&$suggestions, $vars) {
  if (!empty($vars['elements']['content']['#block_content'])) {
    $block = $vars['elements']['content']['#block_content'];
    $block_type = $block->bundle();
    $base_suggestion = 'block__' . $block_type;
    $suggestions[] = $base_suggestion;
    if (!empty($vars['elements']['content']['#view_mode'])) {
      $suggestions[] = $base_suggestion . '__' . $vars['elements']['content']['#view_mode'];
    }
    switch ($block_type) {
      case 'link_group':
        // Get group display.
        $group_display = $block->get('field_group_display')->getValue()[0]['value'];
        $display_type = explode('_', $group_display);
        $suggestions[] = $base_suggestion . '__' . $group_display;
        $suggestions[] = $base_suggestion . '__' . $display_type[0];
        break;

      default:
        break;
    }

  }
  return $suggestions;
}

/**
 * Implements hook_form_alter().
 */
function countyoc_form_search_block_form_alter(&$form, FormStateInterface $form_state){
  unset($form['actions']);
  $form['reset'] = [
    '#type' => 'html_tag',
    '#tag' => 'input',
    '#attributes' => [
      'type' => 'reset',
      'value' => 'Reset',
    ],
  ];
}

/**
 * Implements hook_preprocess_block().
 */
function countyoc_preprocess_block(&$vars) {
  // Add plugin info into block class.
  $vars['attributes']['class'][] = Html::cleanCssIdentifier($vars['plugin_id']);
  // Check if block is child to determine title size.
  $vars['ischild'] = !empty($vars['elements']['content']['#ischild']) ? TRUE : FALSE;
  // Preprocess custom blocks.
  if (!empty($vars['elements']['content']['#block_content'])) {
    $block = $vars['elements']['content']['#block_content'];
    $block_type = $block->bundle();
    // Add block type to class.
    $vars['attributes']['class'][] = Html::cleanCssIdentifier('block-' . $block_type);

    if ($block_type == 'banner') {
      countyoc_preprocess_banner($vars, $block);
    }
    elseif ($block_type == 'link_group') {
      countyoc_preprocess_linkgroup($vars, $block);
    }
    elseif ($block_type == 'tabs') {
      countyoc_preprocess_tabs($vars, $block);
    }
    elseif ($block_type == 'columns') {
      countyoc_preprocess_columns($vars, $block);
    }
  }
  // Add field type to class.
  if (!empty($vars['elements']['content']['#field_type'])) {
    $vars['attributes']['class'][] = Html::cleanCssIdentifier('field-' . $vars['elements']['content']['#field_type']);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function countyoc_preprocess_node(&$vars) {
  // For events, put the start date into the date var so we can use same
  // var in all the node templates.
  if (array_key_exists('field_start_date', $vars['content']) && Element::children($vars['content']['field_start_date'])) {
    $vars['date'] = $vars['content']['field_start_date'];
  }
}

/**
 * Implements hook_preprocess_field().
 */
function countyoc_preprocess_field(&$vars) {
  // Make sure the referenced blocks run through theme later.
  if ($vars['entity_type'] == 'block_content' && ($vars['field_name'] == 'field_tab_items' || $vars['field_name'] == 'field_block_items')) {
    foreach ($vars['items'] as $key => $item) {
      if (!empty($item['content']['#block_content'])) {
        $vars['items'][$key]['block_uuid'] = 'block_content:' . $item['content']['#block_content']->uuid();
        $vars['items'][$key]['block_title'] = $item['content']['#block_content']->label();
      }
    }
  }
  // Add button classes to field link fields.
  if ($vars['field_name'] == 'field_link') {
    foreach ($vars['items'] as $key => $item) {
      if (!empty($item['content']['#url'])) {
        $vars['items'][$key]['content']['#options'] = ['attributes' => ['class' => 'button button--secondary']];
      }
    }
  }
  // Accordion items.
  if ($vars['field_name'] == 'field_accordion_items') {
    foreach ($vars['items'] as $key => $item) {
      if (!empty($item['content']['#block_content'])) {
        $vars['items'][$key]['item_heading'] = $item['content']['#block_content']->get('field_heading')->view('default');
        $vars['items'][$key]['item_body'] = $item['content']['#block_content']->get('field_body')->view('default');
      }
    }
  }
  // Add field name to class.
  $vars['attributes']['class'][] = Html::cleanCssIdentifier($vars['field_name']);
}

/**
 * Implements hook_preprocess_views_view().
 */
function countyoc_preprocess_views_view(&$vars) {
  $view = $vars['view'];

  switch ($view->id()) {

    // Determine block visibility.
    case 'site_alert':
      if ($view->current_display != 'alert_site_block_1') {
        break;
      }
      $route = Url::fromRoute('<current>');
      $alias = preg_replace('/^\//', '', $route->toString());
      $url = $route->getInternalPath();
      $rows = &$vars['rows'][0]['#rows'];

      if (empty($rows)) {
        break;
      }

      foreach ($rows as $i => $row) {
        $display = TRUE;
        $paths = !empty($row['#row']->_entity->field_alert_visibility) ? preg_replace('/<[^>]*>/s', ' ', $row['#row']->_entity->get('field_alert_visibility')->value) : '';

        if (!empty($paths)) {
          $display = FALSE;
          foreach (preg_split('/\s+/s', $paths) as $path) {
            $path = preg_replace('/^\/+/', '', $path);

            if (!strpos($path, '*') && ($path == $url || $path == $alias)) {
              $display = TRUE;
              break;
            }
            elseif (strpos($alias, trim($path, '*')) === 0) {
              $display = TRUE;
              break;
            }
          }
          if (!$display) {
            unset($rows[$i]);
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function countyoc_preprocess_views_view_unformatted(&$vars) {
  // Make sure the referenced blocks run through theme later.
  if ($vars['view']->id() == 'block_content_list') {
    $row_options = $vars['view']->display_handler->getOption('row');
    $vars['view_mode'] = $row_options['options']['view_mode'];
    foreach ($vars['rows'] as $key => $item) {
      if (!empty($item['content']['#block_content'])) {
        $vars['rows'][$key]['block_title'] = $item['content']['#block_content']->label();
        $vars['rows'][$key]['block_id'] = $item['content']['#block_content']->id();
      }
    }
  }
}

/**
 * Preprocess function for banner.
 */
function countyoc_preprocess_banner(&$vars, $block) {
  // Get heading and body.
  $vars['heading'] = $block->get('field_heading')->getString();
  $vars['body'] = $block->get('field_subheading')->getString();
  // Get link.
  $link = $block->get('field_link')->getValue();
  $vars['link_text'] = isset($link[0]['title']) ? $link[0]['title'] : '';
  $vars['link_url'] = isset($link[0]['uri']) ? $link[0]['uri'] : '';
  // Get logo.
  $logo_image = $block->get('field_logo_image')->referencedEntities();
  if (!empty($logo_image[0])) {
    $logo_fid = $logo_image[0]->get('field_media_image')->target_id;
    $logo_file = File::load($logo_fid);
    $vars['logo_src'] = $logo_file->url();
    $vars['logo_alt'] = $logo_image[0]->get('field_media_image')->alt;
  }
  // Get number of images.
  $vars['items'] = $block->get('field_media_image')->referencedEntities();
  // Get search.
  $vars['settings']['search'] = $block->get('field_include_search')->getValue()[0]['value'];
  $vars['settings']['search__button__text'] = t('Search');
  $vars['settings']['search__button__url'] = '#';
}

/**
 * Preprocess function for link group.
 */
function countyoc_preprocess_linkgroup(&$vars, $block) {
  // Get source.
  $group_source = $block->get('field_group_source')->getValue()[0]['value'];
  // Get group display.
  $group_display = $block->get('field_group_display')->getValue()[0]['value'];
  $display_type = explode('_', $group_display);
  $vars['number'] = !empty($display_type[1]) ? $display_type[1] : NULL;
  // Get item display.
  $item_display = $block->get('field_item_display')->getValue()[0]['value'];
  // Override item display for certain group displays.
  $item_display = countyoc_override_item_display($group_display, $item_display);
  $vars['display_content'] = $item_display;
  // Get section background style.
  $vars['section_style'] = $block->get('field_section_background_style')->getValue()[0]['value'];

  // Get content and build blocks.
  if (!empty($group_source)) {
    switch ($group_source) {
      case 'auto':
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
        $storage = \Drupal::entityTypeManager()->getStorage('node');
        $content_type_array = $block->get('field_content_type')->getValue();
        $content_type = !empty($content_type_array[0]['value']) ? $content_type_array[0]['value'] : NULL;
        $count = $block->get('field_count')->getValue()[0]['value'];
        $id_array = countyoc_automatic_get_ids($content_type, $count);
        $id_array = array_values($id_array);
        if (!empty($id_array)) {
          foreach ($id_array as $key => $id) {
            $item_display = ($group_display == 'featured_4' && $key <> 0) ? 'card_mini' : $item_display;
            $entity = $storage->load($id);
            if ($entity) {
              $block_build = $view_builder->view($entity, $item_display);
              if ($group_display == 'featured_4' && $key == 0) {
                $vars['block_1'] = $block_build;
              }
              else {
                $vars['blocks'][] = $block_build;
              }
            }
          }
        }
        break;

      case 'manual_content':
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
        $storage = \Drupal::entityTypeManager()->getStorage('node');
        $id_array = $block->get('field_content_references')->getValue();
        if (!empty($id_array)) {
          foreach ($id_array as $key => $id) {
            $item_display = ($group_display == 'featured_4' && $key <> 0) ? 'card_mini' : $item_display;
            $entity = $storage->load($id['target_id']);
            if ($entity) {
              $block_build = $view_builder->view($entity, $item_display);
              if ($group_display == 'featured_4' && $key == 0) {
                $vars['block_1'] = $block_build;
              }
              else {
                $vars['blocks'][] = $block_build;
              }
            }
          }
        }
        break;

      case 'manual_inline':
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
        $storage = \Drupal::entityTypeManager()->getStorage('block_content');
        $id_array = $block->get('field_block_items')->getValue();
        if (!empty($id_array)) {
          foreach ($id_array as $key => $id) {
            $item_display = ($group_display == 'featured_4' && $key <> 0) ? 'card_mini' : $item_display;
            $entity = $storage->load($id['target_id']);
            $block_build['content'] = $view_builder->view($entity, $item_display);
            $block_build['content']['#view_mode'] = $item_display;
            countyoc_get_block($block_build, $entity);
            if ($group_display == 'featured_4' && $key == 0) {
              $vars['block_1'] = $block_build;
            }
            else {
              $vars['blocks'][] = $block_build;
            }
          }
        }
        break;
    }
  }
}

/**
 * Preprocess function for tabs.
 */
function countyoc_preprocess_tabs(&$vars, $block) {
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
  $storage = \Drupal::entityTypeManager()->getStorage('block_content');
  $id_array = $block->get('field_tab_items')->getValue();
  if (!empty($id_array)) {
    $vars['tabs'] = [];
    foreach ($id_array as $key => $id) {
      $entity = $storage->load($id['target_id']);
      $block_build['content'] = $view_builder->view($entity);
      countyoc_get_block($block_build, $entity);
      $tab['tab_text'] = $entity->label();
      $tab['tab_content'] = $block_build;
      $vars['tabs'][] = $tab;
    }
    unset($vars['content']['field_tab_items']);
  }
}

/**
 * Preprocess function for columns.
 */
function countyoc_preprocess_columns(&$vars, $block) {
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
  $storage = \Drupal::entityTypeManager()->getStorage('block_content');
  $id_array = $block->get('field_column_items')->getValue();
  if (!empty($id_array)) {
    $vars['blocks'] = [];
    foreach ($id_array as $key => $id) {
      $entity = $storage->load($id['target_id']);
      $block_build['content'] = $view_builder->view($entity);
      countyoc_get_block($block_build, $entity);
      $vars['blocks'][] = $block_build;
    }
    unset($vars['content']['field_column_items']);
  }
}

/**
 * Query for automatic src option.
 *
 * @param string $content_type
 *   The node bundle.
 * @param int $count
 *   The number of items to get.
 */
function countyoc_automatic_get_ids($content_type, $count) {
  $ids = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', $content_type)
    ->range(0, $count)
    ->sort('created', 'DESC')
    ->execute();
  return $ids;
}

/**
 * Get block build.
 */
function countyoc_get_block(&$block_build, $entity) {
  // TODO: Can we pass the view mode here?
  $configuration = [
    'label' => $entity->label(),
    'label_display' => BlockPluginInterface::BLOCK_LABEL_VISIBLE
  ];
  $block_uuid = 'block_content:' . $entity->uuid();
  $block_plugin = \Drupal::service('plugin.manager.block')
    ->createInstance($block_uuid, $configuration);
  $block_build += [
    '#theme' => 'block',
    '#attributes' => [],
    '#contextual_links' => [],
    '#configuration' => $block_plugin->getConfiguration(),
    '#plugin_id' => $block_uuid,
    '#base_plugin_id' => 'block_content',
    '#derivative_plugin_id' => $entity->uuid(),
  ];
  $block_build['content']['#ischild'] = TRUE;
}

/**
 * Set item display depending on group display.
 */
function countyoc_override_item_display(string $group_display, string $item_display) {
  switch ($group_display) {
    case 'carousel_3':
      return 'card_bordered';
      break;
    case 'carousel_multi':
      return 'card_background';
      break;
    case 'carousel_promo':
      return 'card_promo';
      break;
    case 'featured_4':
      return 'card';
      break;
    default:
      return $item_display;
      break;
  }
}
